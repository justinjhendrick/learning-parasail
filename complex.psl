//requires jjh_lib.psl

//----------------TODO----------------
//  Test
//  from_univ (maybe)
//------------------------------------

interface Complex<> is
    //operators
    op "+"(Complex; Complex) -> Complex; //Addition with Reals and other Complexes
    op "+="(var Complex; Complex);
    op "+"(Complex; Univ_Real) -> Complex;
    op "+="(var Complex; Univ_Real);
    op "+"(Complex; Univ_Integer) -> Complex;
    op "+="(var Complex; Univ_Integer);
    op "+"(Univ_Real; Complex) -> Complex;
    op "+"(Univ_Integer; Complex) -> Complex;
    op "-"(Complex) -> Complex;          //Subtraction with Reals and other Complexes
    op "-"(Complex; Complex) -> Complex;
    op "-="(var Complex; Complex);
    op "-"(Complex; Univ_Real) -> Complex;
    op "-="(var Complex; Univ_Real);
    op "-"(Complex; Univ_Integer) -> Complex;
    op "-="(var Complex; Univ_Integer);
    op "-"(Univ_Real; Complex) -> Complex;
    op "*"(Complex; Complex) -> Complex; //Multiplication with Reals and other Complexes
    op "*="(var Complex; Complex);
    op "*"(Complex; Univ_Real) -> Complex;
    op "*="(var Complex; Univ_Real);
    op "*"(Complex; Univ_Integer) -> Complex;
    op "*="(var Complex; Univ_Integer);
    op "*"(Univ_Real; Complex) -> Complex;
    op "*"(Univ_Integer; Complex) -> Complex;
    op "**"(Complex; Univ_Integer) -> Complex; //Integer exponentiation
    op "**="(var Complex; Univ_Integer);
    op "magnitude"(Complex) -> Univ_Real;
    op "=?"(Complex; Complex) -> Ordering;

    //Constructors
    func Create(Univ_Real; Univ_Real) -> Complex;       //Return a Complex Number with
    func Create(Univ_Real; Univ_Integer) -> Complex;    //first parameter real
    func Create(Univ_Integer; Univ_Real) -> Complex;    //and second imaginary
    func Create(Univ_Integer; Univ_Integer) -> Complex; //for real or integer input

    //Utilities
    func Is_Real(Complex) -> Boolean; //Return "Imaginary part is Zero"
    func Re(Complex) -> Univ_Real; //Return Real Part
    func Im(Complex) -> Univ_Real; //Return Imaginary Part
    func Phase(Complex) -> optional Univ_Real; //Return angle from real axis in radians
    func To_String(Complex) -> Univ_String; //returns a string with
    //real_part '+' or '-' imaginary_part 'i'
end interface Complex;

class Complex<> is
        //Immutable Complex Number with Real Part and Imaginary Part represented by
        //Two Real numbers
        const R : Univ_Real;
        const I : Univ_Real;
    exports
        op "+"(Left : Complex; Right : Complex) -> Complex is
            return (R => Left.R + Right.R, I => Left.I + Right.I);
        end op "+";

        op "+="(var Left : Complex; Right : Complex) is
            Left := Left + Right;
        end op "+=";

        op "+"(Left : Complex; Right : Univ_Real) -> Complex is
            return (R => Left.R + Right, I => Left.I);
        end op "+";

        op "+="(var Left : Complex; Right : Univ_Real) is
            Left := Left + Right;
        end op "+=";

        op "+"(Left : Complex; Right : Univ_Integer) -> Complex is
            return (R => Left.R + Int_To_Real(Right), I => Left.I);
        end op "+";

        op "+="(var Left : Complex; Right : Univ_Integer) is
            Left := Left + Right;
        end op "+=";

        op "+"(Left : Univ_Real; Right : Complex) -> Complex is
            return Right + Left;
        end op "+";

        op "+"(Left : Univ_Integer; Right : Complex) -> Complex is
            return Int_To_Real(Left) + Right;
        end op "+";

        op "-"(Right : Complex) -> Complex is //negate operator
            return -1 * Right;
        end op "-";

        op "-"(Left : Complex; Right : Complex) -> Complex is
            return (R => Left.R - Right.R, I => Left.I - Right.I);
        end op "-";

        op "-="(var Left : Complex; Right : Complex) is
            Left := Left - Right;
        end op "-=";

        op "-"(Left : Complex; Right : Univ_Real) -> Complex is
            return (R => Left.R - Right, I => Left.I);
        end op "-";

        op "-="(var Left : Complex; Right : Univ_Real) is
            Left := Left - Right;
        end op "-=";

        op "-"(Left : Complex; Right : Univ_Integer) -> Complex is
            return (R => Left.R - Int_To_Real(Right), I => Left.I);
        end op "-";

        op "-="(var Left : Complex; Right : Univ_Integer) is
            Left := Left - Right;
        end op "-=";

        op "-"(Left : Univ_Real; Right : Complex) -> Complex is
            return Left + (-Right);
        end op "-";

        op "*"(Left : Complex; Right : Complex) -> Complex is
            return (R => Left.R * Right.R - Left.I * Right.I,
                    I => Left.R * Right.I + Left.I * Right.R);
        end op "*";

        op "*="(var Left : Complex; Right : Complex) is
            Left := Left * Right
        end op "*=";

        op "*"(Left : Complex; Right : Univ_Real) -> Complex is
            return (R => Left.R * Right, I => Left.I * Right);
        end op "*";

        op "*="(var Left : Complex; Right : Univ_Real) is
            Left := Left * Right;
        end op "*=";

        op "*"(Left : Complex; Right : Univ_Integer) -> Complex is
            return (R => Left.R * Int_To_Real(Right), I => Left.I * Int_To_Real(Right));
        end op "*";

        op "*="(var Left : Complex; Right : Univ_Integer) is
            Left := Left * Right;
        end op "*=";

        op "*"(Left : Univ_Real; Right : Complex) -> Complex is
            return Right * Left;
        end op "*";

        op "*"(Left : Univ_Integer; Right : Complex) -> Complex is
            return Int_To_Real(Left) * Right;
        end op "*";

        op "**"(Base : Complex; Exp : Univ_Integer) {Exp >= 0} -> Complex is
            if Exp == 0 then
                return (R => 1.0, I => 0.0);
            elsif Exp == 1 then
                return Base;
            elsif Exp == 2 then
                return Base * Base;
            end if;
            return Base * Base ** (Exp - 1);
        end op "**";

        op "**="(var Base : Complex; Exp : Univ_Integer) {Exp >= 0} is
            Base := Base ** Exp;
        end op "**="

        op "magnitude"(C : Complex) -> Univ_Real is
            return Sqrt(C.R ** 2 + C.I ** 2);
        end op "magnitude";

        op "=?"(Left : Complex; Right : Complex) -> Ordering is
            //Just compare magnitudes.
            return |Left| =? |Right|;
        end op "=?"

        func Create(Real : Univ_Real; Imaginary : Univ_Real) -> Complex is
            return (R => Real, I => Imaginary);
        end func Create;

        func Create(Real : Univ_Real; Imaginary : Univ_Integer) -> Complex is
            return (R => Real, I => Int_To_Real(Imaginary));
        end func Create;

        func Create(Real : Univ_Integer; Imaginary : Univ_Real) -> Complex is
            return (R => Int_To_Real(Real), I => Imaginary);
        end func Create;

        func Create(Real : Univ_Integer; Imaginary : Univ_Integer) -> Complex is
            return (R => Int_To_Real(Real), I => Int_To_Real(Imaginary));
        end func Create;

        func Is_Real(C : Complex) -> Boolean is
            return C.I in -0.000001 .. 0.000001;
        end func Is_Real;

        func Re(C : Complex) -> Univ_Real is
            return C.R;
        end func Re;

        func Im(C : Complex) -> Univ_Real is
            return C.I;
        end func Im;

        func Phase(C : Complex) -> optional Univ_Real is
            return Atan2(C.I, C.R);
        end func Phase;

        func To_String(C : Complex) -> Result : Univ_String is
            Result := C.R.To_String();
            if C.I >= 0.0 then
                Result |= " + ";
                Result |= C.I.To_String();
            else
                Result |= " - "; //add my own minus
                const Str := C.I.To_String();
                Result |= Str[2 .. Str.Length()]; //do not include the minus
            end if;
            return Result | "i"; //tack on the i
        end func To_String;
end class Complex;

func Test() is
    const i : Complex := Complex::Create(0, 1);
    const one : Complex := Complex::Create(1, 0); 
    Println(one.To_String());
    Println(i.To_String());
    Println(To_String(one * i));
    Println(To_String(i * i) | " == " | To_String(i ** 2) | " == -1");
    Println(To_String(i ** 3) | " == -1i");
    Println("--------------------------------");
    const a : Complex := Complex::Create(1, 1);
    Println(a.To_String());
    Println(To_String(a + one));
    Println(To_String(a * one));
    Println(To_String(a + i));
    Println(To_String(a * i));
    Println("--------------------------------");
    Println("" | |a|);
end func Test;
